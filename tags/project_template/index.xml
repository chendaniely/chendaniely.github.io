<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>project_template on Academic</title>
    <link>/tags/project_template/</link>
    <description>Recent content in project_template on Academic</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 May 2017 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/project_template/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project Templates</title>
      <link>/post/2017/2017-05-30-project_templates/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/2017-05-30-project_templates/</guid>
      <description>

&lt;p&gt;Project templates provide some standardized way to organize files.
Our lab uses a template that is based off the &lt;a href=&#34;http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424&#34; target=&#34;_blank&#34;&gt;Noble 2009 Paper, &amp;ldquo;A Quick Guide to Organizing Computational Biology Projects&amp;rdquo;&lt;/a&gt;.
I&amp;rsquo;ve created a simple shell script that automatically generates this folder structure &lt;a href=&#34;https://github.com/chendaniely/computational-project-cookie-cutter&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;,
and there&amp;rsquo;s an &lt;a href=&#34;https://github.com/Reproducible-Science-Curriculum/rr-init&#34; target=&#34;_blank&#34;&gt;rr-init&lt;/a&gt; project by the Reproducible Science Curriculum folks.&lt;/p&gt;

&lt;p&gt;The structure we have in our lab looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;project
|
|- data             # raw and primary data, are not changed once created
|  |
|  |- project_data  # subfolder that links to an encrypted data storage container
|  |  |
|  |  |- original   # raw data, will not be altered
|  |  |- working    # intermediate datasets from src code
|  +  +- final      # datasets used in analysis
|
|- src /            # any programmatic code
|  |- user1         # user1 assigned to the project
|  +- user2         # user2 assigned to the project
|
|- output           # all output and results from workflows and analyses
|  |- figures/      # graphs, likely designated for manuscript figures
|  |- pictures/     # diagrams, images, and other non-graph graphics
|  +- analysis/     # generated reports for (e.g. rmarkdown output)
|
|- README.md        # the top level description of content
|
|- Makefile         # Makefile, if applicable
|- .gitignore       # git ignore file
+- project.Rproj    # RStudio project
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;p&gt;In the main level there are &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and &lt;code&gt;output&lt;/code&gt; folders.
As well as &lt;code&gt;*.Rproj&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;, and potentially a &lt;code&gt;Makefile&lt;/code&gt; files.&lt;/p&gt;

&lt;h1 id=&#34;the-rproj-file&#34;&gt;The &lt;code&gt;.Rproj&lt;/code&gt; file&lt;/h1&gt;

&lt;p&gt;Since we are primarily an R lab that runs an RStudio Server server,
we use the Rproj files organize the various projects.
There are a few benefits to this.
When using the &lt;code&gt;RProj&lt;/code&gt; file,
it sets the working directory in RStudio to the location of the &lt;code&gt;Rproj&lt;/code&gt; file automatically.
This makes the project more reproducible by avoiding the &lt;code&gt;setwd()&lt;/code&gt; command in R,
and since multiple people work on the same project, referencing other people&amp;rsquo;s source code and data outputs
all stem from a common location.&lt;/p&gt;

&lt;h1 id=&#34;the-gitignore-file&#34;&gt;The &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;.gitignore&lt;/code&gt; file is there to ignore various outputs from the &lt;code&gt;src&lt;/code&gt; code.
This includes things like &lt;code&gt;.pdf&lt;/code&gt; or &lt;code&gt;.html&lt;/code&gt; output from &lt;code&gt;knitr&lt;/code&gt; and &lt;code&gt;rmarkdown&lt;/code&gt; documents,
as well as things in the first level of the &lt;code&gt;data&lt;/code&gt; folder.
In general,
the files and folders in the &lt;code&gt;.gitignore&lt;/code&gt; file are things that can be reproduced/regenerated by running code from the &lt;code&gt;src&lt;/code&gt; folder.&lt;/p&gt;

&lt;h1 id=&#34;the-src-folder&#34;&gt;The &lt;code&gt;src&lt;/code&gt; folder&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; folder contains all the analysis and code for the project.
It should only contain the code for the project and not any kind of output from the code, i.e., data, reports, etc..
Since all the projects int he lab are separate &lt;code&gt;git&lt;/code&gt; repositories,
each person working on the project creates a separate folder with his/her user name (e.g. &lt;code&gt;user1&lt;/code&gt;, &lt;code&gt;user2&lt;/code&gt;) under the &lt;code&gt;src&lt;/code&gt; directory to minimize
potential conflicts within the code.&lt;/p&gt;

&lt;h1 id=&#34;the-output-folder&#34;&gt;The &lt;code&gt;output&lt;/code&gt; folder&lt;/h1&gt;

&lt;p&gt;Is there for any type of &amp;lsquo;final&amp;rsquo; non-data output.
The useage is ambiguous on purpose,
but typically is used for some kind of plot or table that will be used in a final publication or report.
the &lt;code&gt;figures&lt;/code&gt;, &lt;code&gt;pictures&lt;/code&gt;, and &lt;code&gt;analysis&lt;/code&gt; subfolders are just placeholders about what could potentially be placed in the folder,
users have the freedom to adapt the contents to the project at hand.&lt;/p&gt;

&lt;p&gt;Things in the &lt;code&gt;output&lt;/code&gt; folder are, by default,
ignored since the they should be able to be re-created with one of the &lt;code&gt;src&lt;/code&gt; scripts.&lt;/p&gt;

&lt;p&gt;The only thing that should &lt;em&gt;not&lt;/em&gt; be in the output folder are any datasets.
Those should all be under of the the &lt;code&gt;data&lt;/code&gt; subfolders described below.&lt;/p&gt;

&lt;h1 id=&#34;the-data-folder&#34;&gt;The &lt;code&gt;data&lt;/code&gt; folder&lt;/h1&gt;

&lt;p&gt;Since the data folder is part of the code repository, (i.e., it comes when you &lt;code&gt;git clone&lt;/code&gt; the repository),
the contents of the folder are, by default, ignored in the &lt;code&gt;.gitignore&lt;/code&gt; file.
Additionally, because of data privacy concerns, all of our project data are on separate (encrypted) LUKS (Linux Unified Key Setup)
partitions.
The &lt;code&gt;data&lt;/code&gt; folder contains a shortcut to the relevant encrypted data container.
This is one way to prevent data from being checked into the code repository,
and potentially leaving the server.&lt;/p&gt;

&lt;p&gt;Within the encrypted data folder, there are 3 main folders: &lt;code&gt;original&lt;/code&gt;, &lt;code&gt;working&lt;/code&gt;, and &lt;code&gt;final&lt;/code&gt;.
The &lt;code&gt;original&lt;/code&gt; data are the rawest datasets available.
Typically theses are datasets we are given by sponsors,
or found online.
These datasets, in combination with the code in &lt;code&gt;src&lt;/code&gt;, should be able to regenerate any of the datasets in &lt;code&gt;working&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Data provenance is the chronology of how data is transformed through the cleaning and analysis phase.
It&amp;rsquo;s important for reproducibility/reproducibility, and means
that &lt;code&gt;original&lt;/code&gt; data should never be altered directly.
&lt;code&gt;original&lt;/code&gt; data should &lt;em&gt;only&lt;/em&gt; be modified by the code in &lt;code&gt;src&lt;/code&gt;.
Also, because the &lt;code&gt;original&lt;/code&gt; dataset is never altered,
and bugs or alterations in the code can be fixed without compromising the integrity of the dataset.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;working&lt;/code&gt; data folder is mainly used for intermediate datasets.
For example, when a particular data step takes &amp;ldquo;a long time&amp;rdquo; to run,
the output of that datastep can be saved in the &lt;code&gt;working&lt;/code&gt; directory
and be used in a new &lt;code&gt;R&lt;/code&gt; script to resume any additional data cleaning steps.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;final&lt;/code&gt; data folder is usually used for datasets that have been cleaned and ready for analysis.
No dataset is every fully cleaned, you can probably always perform some other data transformation on it,
but this folder is mainly reserved for datasets where an analysis, report, or plot is generated from.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Project templates provide a standard for one to share code with other people.
With a standardized folder structures, a new member of a project can easily start to understand
where the data, code, documentation, and results are.&lt;/p&gt;

&lt;p&gt;It also makes code reproducible/replicable and provides a common location (working directory) to run the code.&lt;/p&gt;

&lt;p&gt;Finally, because there are specifically designated areas for various components of a project,
things become easier to find because everything is not simply placed in the same folder for &amp;ldquo;convenience&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
