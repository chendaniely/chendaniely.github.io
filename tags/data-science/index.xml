<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data science on Daniel Chen</title>
    <link>/tags/data-science/</link>
    <description>Recent content in data science on Daniel Chen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Daniel Chen {year}</copyright>
    <lastBuildDate>Tue, 23 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/data-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analysis-Based Project Templates</title>
      <link>/2018/01/23/analysis-based-project-templates/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/23/analysis-based-project-templates/</guid>
      <description>

&lt;p&gt;One of the most annoying things you hear people say when they are working with some common code base is
&amp;ldquo;It works on my machine&amp;hellip;&amp;rdquo;.
Conversely, one of the more satisfying things is running a script that you are not actively working on and
have it run without problems.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{% post_url 2017-05-30-project_templates %}&#34; target=&#34;_blank&#34;&gt;Project Templates&lt;/a&gt; are one way to address this problem.
The &lt;a href=&#34;{% post_url 2017-05-30-project_templates %}&#34; target=&#34;_blank&#34;&gt;original post&lt;/a&gt; about project templates mainly talks about the folder structure but not so much as the rationale behind why things are the way they are.
Also the original post used a user-based subfolder structure under &lt;code&gt;src&lt;/code&gt;,
which caused some problems when we ended up doing code reviews.&lt;/p&gt;

&lt;p&gt;Why do we even want to use &amp;ldquo;projects&amp;rdquo;?
&lt;a href=&#34;https://software-carpentry.org/&#34; target=&#34;_blank&#34;&gt;Software Carpentry&lt;/a&gt; has a good set of &lt;a href=&#34;https://swcarpentry.github.io/r-novice-gapminder/02-project-intro/&#34; target=&#34;_blank&#34;&gt;explanations&lt;/a&gt;.
When dealing with &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200711843-Working-Directories-and-Workspaces&#34; target=&#34;_blank&#34;&gt;working directories and workspaces&lt;/a&gt; within R and RStudio,
even RStudio suggests &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200526207&#34; target=&#34;_blank&#34;&gt;using projects&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Hopefully the links above are convincing enough to use projects and some standardized folder structure within projects.
Below are some of the issues we&amp;rsquo;ve encountered while working on various projects, and hopefully
we can slowly migrate to a standardization for all projects and analysis moving forward.
Some of the problems and solutions are already mentioned from the Software-Carpentry and RStudio links above.&lt;/p&gt;

&lt;h1 id=&#34;problems&#34;&gt;Problems&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Manually setting a working directory in a script.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Reduces the reproducibility by hard-coding a path specific to each user.&lt;/li&gt;
&lt;li&gt;When sharing code, each person needs to manually edit at least one line within the file to set the working directory.&lt;/li&gt;
&lt;li&gt;Results and other saved outputs from code are also tied to the working directory&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sharing code within a project by copy/pasting from another script.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Redundant routines in code should always be encapsulated into a function so they can be re-used within a script and shared across scripts.&lt;/li&gt;
&lt;li&gt;Since duplication of code is minimized, a fix in one location should provide the same fix in other locations.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve had situations where code was copy/pasted into multiple scripts and multiple bugs were introduced/fixed in multiple places but neither set of duplicated code contained all the bug fixes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Username subfolders in the &lt;code&gt;src&lt;/code&gt; folder&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Promoted code duplication and made it hard to find a particular analysis.&lt;/li&gt;
&lt;li&gt;Originally set up this way to minimize merge conflicts&lt;/li&gt;
&lt;li&gt;Individuals can quickly find his/her own work&lt;/li&gt;
&lt;li&gt;Became a problem because instead of sharing code that needed to be reused, people started copy/pasting code into scripts&lt;/li&gt;
&lt;li&gt;See duplication of code problem from the previous point&lt;/li&gt;
&lt;li&gt;During the code review process, finding code that did a certain task was difficult since it was organized by
who did a task, versus the task itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manually setting working directories while under a version control systems (VCS)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;VCS keep track of changes from files.&lt;/li&gt;
&lt;li&gt;Even if there is a general understanding of manually setting a working directory among collaborators,
every time someone changes the working directory to run on their machine,
the version control system will report a change in the file.&lt;/li&gt;
&lt;li&gt;While the changes can be reverted by the VCS, it&amp;rsquo;s an unnecessary step in the work flow,
and can lead to unwanted changes in the code if a file was reverted unexpectedly.&lt;/li&gt;
&lt;li&gt;Or you will end up with the same lines and files being changed over and over, cluttering the log and history.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;solutions&#34;&gt;Solutions&lt;/h1&gt;

&lt;p&gt;Many of these problems can be solved with using &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200526207&#34; target=&#34;_blank&#34;&gt;RStudio Projects&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prevents scripts from setting a working directory (&lt;code&gt;setwd()&lt;/code&gt;)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The working directory will be the root of the project.&lt;/li&gt;
&lt;li&gt;Since the starting point for each script is deterministic, we can implement a folder structure within the project in a way
where data has a common access point (e.g., &lt;code&gt;./data/path/to/data&lt;/code&gt;) and code that needs to be run will also have a common access point (e.g., &lt;code&gt;./src/path/to/script.R&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code and scripts can be easily be referenced from the root working directory of the project&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When someone wants to create a script to hold functions, it has a consistent path to be &lt;code&gt;source&lt;/code&gt;d in another R script&lt;/li&gt;
&lt;li&gt;This would provide a place for common code bases to be shared without copy/pasting into multiple scripts and
without having to be put into a proper R package.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The structure of the project template needs to account for multiple people entering and leaving a project at various points during the lifetime of a project&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;We have a &lt;code&gt;src&lt;/code&gt; folder so people knew where to put his/her &lt;code&gt;R&lt;/code&gt; scripts&lt;/li&gt;
&lt;li&gt;needed a way to organize the folder so we don&amp;rsquo;t have 10s or 100s of files in a single directory.&lt;/li&gt;
&lt;li&gt;We initially settled on using user name sub-folders.

&lt;ul&gt;
&lt;li&gt;This prevented a lot of potential merge conflicts, since people are more likely to just work in their own directory&lt;/li&gt;
&lt;li&gt;but it also caused people to copy/paste from other people&amp;rsquo;s folders.&lt;/li&gt;
&lt;li&gt;It also made it difficult to find out later on how to find a particular piece of analytics.&lt;/li&gt;
&lt;li&gt;We would have to know who worked on it to find the script, versus looking up the analysis itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Thus, we are moving to a naming system not under user names.

&lt;ul&gt;
&lt;li&gt;This also will prevent copy/pasting of common code bases.&lt;/li&gt;
&lt;li&gt;One thing that can happen is more merge conflicts (editing the same line of a file at the same time) while working

&lt;ul&gt;
&lt;li&gt;but even that can be minimized by coordinating efforts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduces the Git history clutter&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Version control systems (VCS) keep track of changes within a file.&lt;/li&gt;
&lt;li&gt;When we have working directories manually being set on a user-by-user basis, each user will have to set his/her own working directory
to get the script to run.&lt;/li&gt;
&lt;li&gt;This requires commenting out the current working directory set in the code,
and either replacing or uncommenting out the &amp;lsquo;correct&amp;rsquo; working directory.&lt;/li&gt;
&lt;li&gt;This will cause the VCS to note there is a change in a file where the user either needs to &lt;code&gt;commit&lt;/code&gt; or &lt;code&gt;revert&lt;/code&gt; for each person who is running the script.&lt;/li&gt;
&lt;li&gt;While this may be a &amp;lsquo;harmless&amp;rsquo; change, it clutters the &lt;code&gt;log&lt;/code&gt; and history of the file, when bigger changes need to be reverted or bugs need to be tracked down.&lt;/li&gt;
&lt;li&gt;The project template should also fix this problem since the working directory no longer needs to be set in the file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;changes-to-mindset&#34;&gt;Changes to mindset&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Section taken from feedback from Ian&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;

&lt;p&gt;The major change from using username &lt;code&gt;src&lt;/code&gt; subfolders to analysis-based subfolders is how to navigate the initial hierarchies of the folder.
While the most technical hurdle to overcome is the potential of increased Git merge conflicts,
it can be minimized by coordinating efforts.
We have a system that distinguishes code from data, where code is stored on a Git server (e.g., GitLab) and data is stored on an encrypted LUKS volume.
This means learning and using Git will have to be part of everyone&amp;rsquo;s toolkit.
It&amp;rsquo;s a technical solution to solve a very complex problem, sharing and version controlling files,
but it does offer solutions for project management, if you choose to use it.&lt;/p&gt;

&lt;h3 id=&#34;code-structure&#34;&gt;Code structure&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The most appealing part of using usernames as folders is that it allows users to think of their code however they like, and never need to reconcile that with other people&amp;rsquo;s understanding of project structure. For instance, Alice can organize folders by the work she did on a month to month basis. Bob can organize scripts into data processing/data loading/plots/misc. Chris can structure code based on who asked her to do whatever. Each person has a system that works for them and doesn&amp;rsquo;t have to work for anyone else.
But even in this small example, the three code bases are conceptually incompatible. How do you reconcile folders called &amp;lsquo;June2017&amp;rsquo;, &amp;lsquo;get ACS stuff&amp;rsquo;, and &amp;lsquo;For Sallie&amp;rsquo;? In a project-centered folder structure, everyone needs to be on more or less the same page regarding the structure of the project and what goes on in it. Personally I think this is a good thing, and something we should be doing anyway, but it will certainly be a challenge especially if people don&amp;rsquo;t think to think of it.
```&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Data Science and Analysis</title>
      <link>/2015/05/05/getting-started-with-data-science-and-analysis/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/05/05/getting-started-with-data-science-and-analysis/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been an instructor for &lt;a href=&#34;http://software-carpentry.org&#34; target=&#34;_blank&#34;&gt;Software-Carpentry (SWC)&lt;/a&gt; over a year now.
It&amp;rsquo;s been a facinating experience and I&amp;rsquo;m proud to be a part of an open source movement promoting best practices.
Typically when looking to start learing data science/analysis the first things people look up is something along the lines of: &amp;ldquo;learn python&amp;rdquo;, &amp;ldquo;free online r course&amp;rdquo;, &amp;ldquo;data science python&amp;rdquo;, &amp;ldquo;r jobs&amp;rdquo;, etc.
Or scan through the coursera offerings.
I&amp;rsquo;m a bit biased, but I think the SWC material is one of the best ways to just get familiar with the basics.
This isn&amp;rsquo;t a blog post about SWC per se, but how one might go about learing and navigating some of the material on your own without attending a workshop.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&#34;software-carptentry-material&#34;&gt;Software Carptentry Material&lt;/h1&gt;

&lt;p&gt;SWC has a page of &lt;a href=&#34;http://software-carpentry.org/lessons.html&#34; target=&#34;_blank&#34;&gt;lessons&lt;/a&gt; that link to the various lessons taught during workshops.
The core material covers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://swcarpentry.github.io/shell-novice/&#34; target=&#34;_blank&#34;&gt;Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some programming language like &lt;a href=&#34;http://swcarpentry.github.io/python-novice-inflammation/&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;http://swcarpentry.github.io/r-novice-inflammation/&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt;, &lt;a href=&#34;http://swcarpentry.github.io/matlab-novice-inflammation/&#34; target=&#34;_blank&#34;&gt;MATLAB&lt;/a&gt;, etc&lt;/li&gt;
&lt;li&gt;Version control using &lt;a href=&#34;https://github.com/swcarpentry/git-novice&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;https://github.com/swcarpentry/hg-novice&#34; target=&#34;_blank&#34;&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Databases and &lt;a href=&#34;http://swcarpentry.github.io/sql-novice-survey/&#34; target=&#34;_blank&#34;&gt;SQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you take a look and listen (there is sound) to the &lt;a href=&#34;http://swcarpentry.github.io/slideshows/introducing-software-carpentry/index.html#slide-3&#34; target=&#34;_blank&#34;&gt;introductory browsercase&lt;/a&gt;.
You will see that we say we teach the above material, but in essense we try to convey:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automation of repetitive tasks&lt;/li&gt;
&lt;li&gt;Tracking and sharing work&lt;/li&gt;
&lt;li&gt;Building modular code&lt;/li&gt;
&lt;li&gt;Manage data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;rsquo;s a little bait-and-switch :)&lt;/p&gt;

&lt;h1 id=&#34;installing-things&#34;&gt;Installing Things&lt;/h1&gt;

&lt;p&gt;For each SWC workshop is accompanied by a &lt;a href=&#34;http://chendaniely.github.io/workshop-template-empty/&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.
The website Contains information about location, instructors, helpers, syllabus, etc.
For people reading this post, the most important part may be the installation instructions towards the middle/bottom of the page.
There are separate instructions depending on your operating system.&lt;/p&gt;

&lt;p&gt;Essentially:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;http://continuum.io/downloads&#34; target=&#34;_blank&#34;&gt;Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;R: &lt;a href=&#34;http://cran.rstudio.com/&#34; target=&#34;_blank&#34;&gt;R&lt;/a&gt; and &lt;a href=&#34;http://www.rstudio.com/products/rstudio/download/&#34; target=&#34;_blank&#34;&gt;RStudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;navigating-the-material&#34;&gt;Navigating the Material&lt;/h1&gt;

&lt;p&gt;For people who have not been to a workshop trying to navigate the lesson material can be tricky.
And I would highly suggest going through at least the first 3 &lt;a href=&#34;http://swcarpentry.github.io/shell-novice/&#34; target=&#34;_blank&#34;&gt;Unix&lt;/a&gt; lessons.
This is mainly because loading files in a programming language uses the concept of relative and absolute paths, and it&amp;rsquo;s important to know where your data is and how to load it.&lt;/p&gt;

&lt;p&gt;Using the R material as an example.  The instructors typically teach from the &lt;a href=&#34;http://swcarpentry.github.io/r-novice-inflammation/&#34; target=&#34;_blank&#34;&gt;Novice R Inflammation&lt;/a&gt; lessons.  There has been some &lt;a href=&#34;https://github.com/swcarpentry/r-novice-inflammation/pull/65#issuecomment-93483536&#34; target=&#34;_blank&#34;&gt;discussion&lt;/a&gt; and plans to use the &lt;a href=&#34;http://www.gapminder.org/&#34; target=&#34;_blank&#34;&gt;Gapminder&lt;/a&gt; data to teach lessons.  The beta can be found in the &lt;a href=&#34;https://github.com/swcarpentry/r-novice-gapminder&#34; target=&#34;_blank&#34;&gt;R Novice Gapminder&lt;/a&gt; lesson.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re on the github page of the lesson, there are a few ways to get the lessons plan&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you know your way around git, you can clone the repository&lt;/li&gt;
&lt;li&gt;Otherwise, you will see an option to &amp;ldquo;Download ZIP&amp;rdquo; on the right panel.&lt;/li&gt;
&lt;li&gt;View them in the browser&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first 2 methods get you do the same place &amp;ndash; have the lessons on your computer.
In order to view the lessons, open up the folder and all the lessons are numbered and end in &lt;code&gt;.html&lt;/code&gt;.
Click, read, and code through them in order.&lt;/p&gt;

&lt;p&gt;If you want to view the lessons online, you can click the &lt;code&gt;.Rmd&lt;/code&gt; documents, and github should be able to render the lesson for you in the browser.  For Python and other materials, use the &lt;code&gt;.md&lt;/code&gt; documents.
The caveat with viewing the &lt;code&gt;.Rmd&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt; (aka R markdown, and markdown respectively) is that it does not render the documently exactly the same way as the &lt;code&gt;.html&lt;/code&gt; files.
There is a potential for things to be rendered incorrectly, and you&amp;rsquo;ll see some bizzare (YAML) header on the top.
It&amp;rsquo;s great for a quick reference when you&amp;rsquo;re not at your computer, but I would suggest using one of the &lt;code&gt;.html&lt;/code&gt; methods.&lt;/p&gt;

&lt;h1 id=&#34;data-carpentry-material&#34;&gt;Data Carpentry Material&lt;/h1&gt;

&lt;p&gt;Software Carpentry&amp;rsquo;s sister organization, &lt;a href=&#34;http://datacarpentry.org/&#34; target=&#34;_blank&#34;&gt;Data Carpentry&lt;/a&gt; also has a set of &lt;a href=&#34;http://datacarpentry.org/lesson-dev.html&#34; target=&#34;_blank&#34;&gt;lesson plans&lt;/a&gt;.
From their &lt;a href=&#34;http://datacarpentry.org/about.html&#34; target=&#34;_blank&#34;&gt;about us&lt;/a&gt; page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data Carpentry is a sister organization of Software Carpentry designed to teach basic concepts, skills and tools for working more effectively with data.
We develop curricula and run workshops that are 1) domain specific; 2) target fundamental data analysis and data management challenges; and 3) require little or no prior programming experience.
In many domains of research the rapid generation of large amounts of data is fundamentally changing how research is done. The deluge of data presents great opportunities, but also many challenges in managing, analyzing and sharing data. Data Carpentry aims to teach the data skills that will enable researchers to be more effective and productive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pick a language you want to do the lesson with.  &lt;code&gt;clone&lt;/code&gt; or &lt;code&gt;Download ZIP&lt;/code&gt;, and go through the lessons using the &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.Rmd&lt;/code&gt;, or &lt;code&gt;.md&lt;/code&gt; as mentioned above.&lt;/p&gt;

&lt;h1 id=&#34;happy-learning&#34;&gt;Happy Learning!&lt;/h1&gt;

&lt;p&gt;Hopefully this has been clear enough.  If not, post a comment, and I&amp;rsquo;ll respond and update this post accordinly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
