<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Daniel Chen</title>
    <link>/tags/git/</link>
    <description>Recent content in git on Daniel Chen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Daniel Chen {year}</copyright>
    <lastBuildDate>Tue, 27 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Squash and Merge Workflow</title>
      <link>/2019/08/27/git-squash-and-merge-workflow/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/27/git-squash-and-merge-workflow/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I have a love-hate relationship with Git.
It took me years of following cookbooks and following strict set of commands to
get a sense of how it works.
I still have to spend time wrangling Git at times,
but I’ve gotten to the point where I’m just annoyed, instead of scared.
Here is the branching-squash-and-merge workflow I’ve been using at RStudio.&lt;/p&gt;
&lt;p&gt;Also, sorry I may be glossing over some of the Git basics in this post…&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;At RStudio, I’m using a brancing workflow where I am added directly as a collaborator to a project.
I still have to create pull requests for review,
but contrast this with me forking the repository and creating a pull regrest from my copy (&lt;code&gt;origin&lt;/code&gt;)
to the parent repository (&lt;code&gt;upstream&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Every workflow has benefits and drawbacks.
The current workflow I’m using is a “squash and merge”.
Where all the commits in a pull request are “squashed” into a single commit when it it merged into master.
This means the main commit history is &lt;em&gt;super&lt;/em&gt; clean,
and potentially sets up the repository to create automatic change logs or &lt;code&gt;NEWS&lt;/code&gt; reports.
The downside is if you start branching off other branches (instead of the main &lt;code&gt;master&lt;/code&gt;),
you’ll have to &lt;code&gt;rebase&lt;/code&gt; or &lt;code&gt;cherry-pick&lt;/code&gt; to update the branches after a branch gets merged.&lt;/p&gt;
&lt;div id=&#34;the-general-problem&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The general problem&lt;/h1&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;m1-m2-m3 # the master branch
       \
        x11-x12-x13 # example branch_1
                  \
                   y21-y22-y23 # example branch_2 that depends on branch_1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a squash and merge the Git DAG looks like this&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;m1-m2-m3-s1 # master branch + squash-merge
       \
        x11-x12-x13 # commits from branch_1 still exist
                  \
                   y21-y22-y23 # commits from branch_2 still exist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can’t simply just squash merge &lt;code&gt;branch_2&lt;/code&gt;, becuase the commits from &lt;code&gt;branch_1&lt;/code&gt;
are technically still part of the history of &lt;code&gt;branch_2&lt;/code&gt;,
so a rebase of &lt;code&gt;branch_2&lt;/code&gt; against the new master will cause conflicts,
&lt;em&gt;and&lt;/em&gt; I’ll have duplicate messages if I do another squash+merge of &lt;code&gt;branch_2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you did a &lt;code&gt;rebase&lt;/code&gt; you’ll end up with this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git checkout branch_2 # make sure you&amp;#39;re on branch_2
git rebase master
# fix conflicts
# so many conflicts&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;m1-m2-m3-s1 # master branch + squash-merge
          \
           x11-x12-x13-y21-y22-y23 # commits from branch_1 and branch_2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead, you need to &lt;code&gt;git cherry-pick&lt;/code&gt; the commits against the updated master
with just the commits from &lt;code&gt;branch_2&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git checkout master # go to master branch so you can cherry-pick commits on top
git cherry-pick y21^..y23 # this is how to cherry-pick multiple commits
# (note the ^ to also include commit y21, otherwise it is left exclusive)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;m1-m2-m3-s1 # master branch + squash-merge
       \  \
        \  y21-y22-y23 # cherry-pick commits from branch_2 # this is good
         \
          x11-x12-x13 # commits from branch_1 still exist # already in s1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don’t need the commits from branch one anymore (&lt;code&gt;x11&lt;/code&gt; to &lt;code&gt;x13&lt;/code&gt; in the example),
so we can deleate that branch using &lt;code&gt;git branch -D branch_1&lt;/code&gt;,
note you have to use a force delete with the &lt;code&gt;-D&lt;/code&gt; flag,
because git does not think that &lt;code&gt;branch_1&lt;/code&gt; was merged because we did a squash+merge.
Otherwise you would’ve been able to use the lowercase &lt;code&gt;-d&lt;/code&gt; flag to delete the branch.&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;m1-m2-m3-s1 # master branch + squash-merge
          \
           y21-y22-y23 # cherry-pick commits from branch_2 # yay!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we finally get everthing up to date, and can re-update the pull request for branch 2
by doing a force push: &lt;code&gt;git push -f origin master&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;in-the-real-world&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;In the real world&lt;/h1&gt;
&lt;p&gt;The PR process is the same as usual:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a branch&lt;/li&gt;
&lt;li&gt;Push the branch to the remote (i.e., Github, in this case)&lt;/li&gt;
&lt;li&gt;Pull request!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, Github now gives you an option of which &lt;em&gt;green&lt;/em&gt; button you want!
Specifically, the option to “Squash and merge”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;github_squash_merge.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is fine when you have a totally independent PR
and there’s no other work that is based of the current work on that branch.
However here’s an example where I created separate branches for each “feature”,
but they all rely on the previous feature.&lt;/p&gt;
&lt;p&gt;Output of my &lt;code&gt;git log --oneline --graph --decorate --all&lt;/code&gt;, which I have aliased as &lt;code&gt;git l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here’s the current state we’re in after we perform a squash+merge on GitHub&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;              vignettes
             /
older_commits
             \
              master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what the actual state of the repository looks like.&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:51:06] $ git l
* 16f4b6b (HEAD -&amp;gt; vignettes) intro to gradethis for learnr docs
* b4e2873 (origin/vignettes) emphasize not to use ==
* f66aa39 i don&amp;#39;t want to stash
| * feb82b3 (origin/gh-pages) Deploy rstudio-education/gradethis to github.com/rstudio-education/gradethis.git:gh-pages
| * a195fa3 (origin/master, origin/HEAD) fix gradethis demo (#70)
| | * 4aaee31 (origin/compare_default_formals, compare_default_formals) call_standarise_formals
| | * 19354dd refactor is_code_same to is_code_identical
| | * 5591ae8 rename fxn code_is_same -&amp;gt; is_code_same
| |/  
| | * 91cf16e (update_grading_demo) fix gradethis demo
| |/  
| * 9083fc8 (me/master, master) rename functions per #65 update docs and tests (#72)
| * 5ec1144 Docs to markdown per #68 by @andrie + Barret changes (#69)
| * 9cc3d6d Test result api fixes#60 (#63)
|/  
* d5cf9de Doc fixes (#62) and function pruning
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we want is something like this:&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;older_commits
             \
              master
                    \
                     vignettes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we pull and update &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:51:18] $ git pull origin master
From github.com:rstudio-education/gradethis
 * branch            master     -&amp;gt; FETCH_HEAD
Updating 9083fc8..a195fa3
Fast-forward
 inst/tutorials/grading-demo/grading-demo.Rmd | 249 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------------------------------------------------
 1 file changed, 112 insertions(+), 137 deletions(-)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that master is up to date,&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;              vignettes
             /
older_commits
             \
              master-master # master has moved up a commit from pull&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can cherry-pick the commits of interest&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:51:30] $ git cherry-pick f66aa39^..16f4b6b
[master 28c7ebe] i don&amp;#39;t want to stash
 Date: Wed Aug 14 10:03:25 2019 -0400
 3 files changed, 72 insertions(+)
 create mode 100644 vignettes/000-introduction_to_gradethis.Rmd
 create mode 100644 vignettes/010-using_equal.Rmd
 create mode 100644 vignettes/990-developers_guide.Rmd
[master 9b84be6] emphasize not to use ==
 Date: Wed Aug 14 11:44:36 2019 -0400
 1 file changed, 4 insertions(+), 4 deletions(-)
[master 846bb18] intro to gradethis for learnr docs
 Date: Tue Aug 27 10:51:06 2019 -0400
 1 file changed, 151 insertions(+), 9 deletions(-)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I used the &lt;code&gt;&amp;lt;commit&amp;gt;^..&amp;lt;commit&amp;gt;&lt;/code&gt; notation while &lt;code&gt;cherry-pick&lt;/code&gt;ing.
The &lt;code&gt;^&lt;/code&gt; means to also include that commit, otherwise it will start from that commit,
but not include it (i.e., left exclusive).&lt;/p&gt;
&lt;p&gt;If you wanted to not use the &lt;code&gt;^&lt;/code&gt; you need to pick the previous commit hash.
In my case it would’ve been &lt;code&gt;d5cf9de&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we need to clean up the references to our branch.
Since we &lt;code&gt;cherry-pick&lt;/code&gt;ed commits on master we’re actually still on master.
So we need to do update where our branches are pointing to by using `git reset –hard &lt;commit&gt;&lt;/p&gt;
&lt;p&gt;First we checkout the &lt;code&gt;vignettes&lt;/code&gt; branch,&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:51:46] $ git checkout vignettes 
Switched to branch &amp;#39;vignettes&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:51:52] $ git l
* 846bb18 (master) intro to gradethis for learnr docs
* 9b84be6 emphasize not to use ==
* 28c7ebe i don&amp;#39;t want to stash
* a195fa3 (origin/master, origin/HEAD) fix gradethis demo (#70)
| * 16f4b6b (HEAD -&amp;gt; vignettes) intro to gradethis for learnr docs
| * b4e2873 (origin/vignettes) emphasize not to use ==
| * f66aa39 i don&amp;#39;t want to stash
| | * feb82b3 (origin/gh-pages) Deploy rstudio-education/gradethis to github.com/rstudio-education/gradethis.git:gh-pages
| | * 4aaee31 (origin/compare_default_formals, compare_default_formals) call_standarise_formals
| | * 19354dd refactor is_code_same to is_code_identical
| | * 5591ae8 rename fxn code_is_same -&amp;gt; is_code_same
| |/  
|/|   
| | * 91cf16e (update_grading_demo) fix gradethis demo
| |/  
|/|   
* | 9083fc8 (me/master) rename functions per #65 update docs and tests (#72)
* | 5ec1144 Docs to markdown per #68 by @andrie + Barret changes (#69)
* | 9cc3d6d Test result api fixes#60 (#63)
|/  
* d5cf9de Doc fixes (#62) and function pruning&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then set it to the correct commit location.&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:52:04] $ git reset --hard 846bb18
HEAD is now at 846bb18 intro to gradethis for learnr docs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then repeat the process for the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;First &lt;code&gt;checkout master&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:52:07] $ git checkout master
Switched to branch &amp;#39;master&amp;#39;
Your branch is ahead of &amp;#39;origin/master&amp;#39; by 3 commits.
  (use &amp;quot;git push&amp;quot; to publish your local commits)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then &lt;code&gt;reset --hard&lt;/code&gt; to the correct location:&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:52:11] $ git reset --hard a195fa3
HEAD is now at a195fa3 fix gradethis demo (#70)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now everything is in the right place&lt;/p&gt;
&lt;pre class=&#34;markdown&#34;&gt;&lt;code&gt;older_commits
             \
              master
                    \
                     vignettes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:52:21] $ git l
* 846bb18 (vignettes) intro to gradethis for learnr docs
* 9b84be6 emphasize not to use ==
* 28c7ebe i don&amp;#39;t want to stash
* a195fa3 (HEAD -&amp;gt; master, origin/master, origin/HEAD) fix gradethis demo (#70)
| * feb82b3 (origin/gh-pages) Deploy rstudio-education/gradethis to github.com/rstudio-education/gradethis.git:gh-pages
| * 4aaee31 (origin/compare_default_formals, compare_default_formals) call_standarise_formals
| * 19354dd refactor is_code_same to is_code_identical
| * 5591ae8 rename fxn code_is_same -&amp;gt; is_code_same
|/  
| * 91cf16e (update_grading_demo) fix gradethis demo
|/  
* 9083fc8 (me/master) rename functions per #65 update docs and tests (#72)
* 5ec1144 Docs to markdown per #68 by @andrie + Barret changes (#69)
* 9cc3d6d Test result api fixes#60 (#63)
| * b4e2873 (origin/vignettes) emphasize not to use ==
| * f66aa39 i don&amp;#39;t want to stash
|/  
* d5cf9de Doc fixes (#62) and function pruning&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can update the GitHub remote by force bushing the branch
(remember to be on the branch before pushing).&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (master) 
[10:53:25] $ git checkout vignettes 
Switched to branch &amp;#39;vignettes&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:53:30] $ git push -f origin vignettes 
Enumerating objects: 15, done.
Counting objects: 100% (15/15), done.
Delta compression using up to 4 threads
Compressing objects: 100% (14/14), done.
Writing objects: 100% (14/14), 3.27 KiB | 3.27 MiB/s, done.
Total 14 (delta 7), reused 0 (delta 0)
remote: Resolving deltas: 100% (7/7), completed with 1 local object.
To github.com:rstudio-education/gradethis.git
 + b4e2873...846bb18 vignettes -&amp;gt; vignettes (forced update)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final Graph now looks like this&lt;/p&gt;
&lt;pre class=&#34;console&#34;&gt;&lt;code&gt;dchen@longclaw [~/git/hub/gradethis]  (vignettes) 
[10:54:13] $ git l
* 846bb18 (HEAD -&amp;gt; vignettes, origin/vignettes) intro to gradethis for learnr docs
* 9b84be6 emphasize not to use ==
* 28c7ebe i don&amp;#39;t want to stash
* a195fa3 (origin/master, origin/HEAD, master) fix gradethis demo (#70)
| * feb82b3 (origin/gh-pages) Deploy rstudio-education/gradethis to github.com/rstudio-education/gradethis.git:gh-pages
| * 4aaee31 (origin/compare_default_formals, compare_default_formals) call_standarise_formals
| * 19354dd refactor is_code_same to is_code_identical
| * 5591ae8 rename fxn code_is_same -&amp;gt; is_code_same
|/  
| * 91cf16e (update_grading_demo) fix gradethis demo
|/  
* 9083fc8 (me/master) rename functions per #65 update docs and tests (#72)
* 5ec1144 Docs to markdown per #68 by @andrie + Barret changes (#69)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It’s taken me many years to be comfortable with Git.
My previous go-to method was to &lt;code&gt;rebase&lt;/code&gt; one branch on top of the other,
but with the squash-and-merge method, a lot of commits get repeated,
and it just makes &lt;code&gt;rebase&lt;/code&gt;ing a pain with all the commits and merge conflicts.&lt;/p&gt;
&lt;p&gt;In this particular workflow I found &lt;code&gt;cherry-pick&lt;/code&gt; to be way more convenient,
and led to fewer merge conflicts.&lt;/p&gt;
&lt;p&gt;Again, the notation for &lt;code&gt;cherry-pick&lt;/code&gt; is weird, in that it is &lt;em&gt;left exclusive&lt;/em&gt; unless you put in the &lt;code&gt;^&lt;/code&gt;,
i.e.,&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git cherry-pick &amp;lt;commit-start&amp;gt;^..&amp;lt;commit-end&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;not&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git cherry-pick &amp;lt;commit-start&amp;gt;..&amp;lt;commit-end&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
